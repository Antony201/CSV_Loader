// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	multipart "mime/multipart"
	reflect "reflect"

	test_task "github.com/Antony201/CsvLoader"
	gomock "github.com/golang/mock/gomock"
)

// MockTransactions is a mock of Transactions interface.
type MockTransactions struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionsMockRecorder
}

// MockTransactionsMockRecorder is the mock recorder for MockTransactions.
type MockTransactionsMockRecorder struct {
	mock *MockTransactions
}

// NewMockTransactions creates a new mock instance.
func NewMockTransactions(ctrl *gomock.Controller) *MockTransactions {
	mock := &MockTransactions{ctrl: ctrl}
	mock.recorder = &MockTransactionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactions) EXPECT() *MockTransactionsMockRecorder {
	return m.recorder
}

// GetByDatePeriod mocks base method.
func (m *MockTransactions) GetByDatePeriod(fromDateParam, toDateParam string) ([]test_task.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDatePeriod", fromDateParam, toDateParam)
	ret0, _ := ret[0].([]test_task.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDatePeriod indicates an expected call of GetByDatePeriod.
func (mr *MockTransactionsMockRecorder) GetByDatePeriod(fromDateParam, toDateParam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDatePeriod", reflect.TypeOf((*MockTransactions)(nil).GetByDatePeriod), fromDateParam, toDateParam)
}

// GetByPaymentNarrative mocks base method.
func (m *MockTransactions) GetByPaymentNarrative(paymentNarrativeParam string) ([]test_task.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPaymentNarrative", paymentNarrativeParam)
	ret0, _ := ret[0].([]test_task.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPaymentNarrative indicates an expected call of GetByPaymentNarrative.
func (mr *MockTransactionsMockRecorder) GetByPaymentNarrative(paymentNarrativeParam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPaymentNarrative", reflect.TypeOf((*MockTransactions)(nil).GetByPaymentNarrative), paymentNarrativeParam)
}

// GetByPaymentType mocks base method.
func (m *MockTransactions) GetByPaymentType(paymentTypeParam string) ([]test_task.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPaymentType", paymentTypeParam)
	ret0, _ := ret[0].([]test_task.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPaymentType indicates an expected call of GetByPaymentType.
func (mr *MockTransactionsMockRecorder) GetByPaymentType(paymentTypeParam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPaymentType", reflect.TypeOf((*MockTransactions)(nil).GetByPaymentType), paymentTypeParam)
}

// GetByStatus mocks base method.
func (m *MockTransactions) GetByStatus(statusParam string) ([]test_task.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStatus", statusParam)
	ret0, _ := ret[0].([]test_task.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStatus indicates an expected call of GetByStatus.
func (mr *MockTransactionsMockRecorder) GetByStatus(statusParam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStatus", reflect.TypeOf((*MockTransactions)(nil).GetByStatus), statusParam)
}

// GetByTerminalIds mocks base method.
func (m *MockTransactions) GetByTerminalIds(terminalIdParams []int) ([]test_task.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTerminalIds", terminalIdParams)
	ret0, _ := ret[0].([]test_task.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTerminalIds indicates an expected call of GetByTerminalIds.
func (mr *MockTransactionsMockRecorder) GetByTerminalIds(terminalIdParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTerminalIds", reflect.TypeOf((*MockTransactions)(nil).GetByTerminalIds), terminalIdParams)
}

// GetByTransactionId mocks base method.
func (m *MockTransactions) GetByTransactionId(transactionId int) (test_task.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTransactionId", transactionId)
	ret0, _ := ret[0].(test_task.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTransactionId indicates an expected call of GetByTransactionId.
func (mr *MockTransactionsMockRecorder) GetByTransactionId(transactionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTransactionId", reflect.TypeOf((*MockTransactions)(nil).GetByTransactionId), transactionId)
}

// LoadFileToDb mocks base method.
func (m *MockTransactions) LoadFileToDb(file multipart.File) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LoadFileToDb", file)
}

// LoadFileToDb indicates an expected call of LoadFileToDb.
func (mr *MockTransactionsMockRecorder) LoadFileToDb(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadFileToDb", reflect.TypeOf((*MockTransactions)(nil).LoadFileToDb), file)
}
